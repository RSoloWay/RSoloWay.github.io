{"version":3,"sources":["Weather/thermometer.svg","Body/Body.js","Header/Header.js","Weather/Weather.js","Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Body","props","click","e","preventDefault","tasks","getLocalTasks","state","localTasks","isDone","getLocalIsDone","localIsDone","icon","getLocalIcon","localIcon","taskValue","document","querySelector","split","value","push","localStorage","setItem","join","setState","getItem","zzz","querySelectorAll","target","i","length","clear","bind","window","confirm","removeItem","this","x","y","z","listTask","map","d","className","key","onClick","id","placeholder","React","Component","Header","date","Date","timerId","setInterval","tick","clearInterval","toLocaleTimeString","toLocaleDateString","apiKey","Weather","weatherUpdate","a","fetch","city","apiRequest","json","weatherData","temp","main","toFixed","weather","changeCity","select","selectValue","url","src","alt","therm","onChange","Footer","href","test","innerWidth","console","log","innerHeight","style","height","App","onLoad","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8253ec90.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thermometer.f592f9a3.svg\";","import React from 'react';\r\nimport './Body.css';\r\n\r\n\r\nclass Body extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.clear = this.clear.bind(this);\r\n        this.state = {localTasks: localStorage.getItem('tasks'), localIsDone: localStorage.getItem('isDone'), localIcon: localStorage.getItem('icon')}\r\n    }  \r\n\r\n\r\n    click = (e) => {\r\n        e.preventDefault();\r\n\r\n        let tasks = [],\r\n            getLocalTasks = this.state.localTasks,\r\n            isDone = [],\r\n            getLocalIsDone = this.state.localIsDone,\r\n            icon = [],\r\n            getLocalIcon = this.state.localIcon,\r\n\r\n            taskValue = document.querySelector('.task')\r\n            \r\n\r\n        if (getLocalTasks !== null) {\r\n            tasks = getLocalTasks.split('!next!')\r\n            isDone = getLocalIsDone.split(', ')\r\n            icon = getLocalIcon.split(', ')\r\n        }\r\n\r\n        if (taskValue.value !== '') {\r\n            tasks.push(taskValue.value)\r\n            isDone.push('active')\r\n            icon.push('far fa-square check-square')\r\n            localStorage.setItem('tasks', tasks.join('!next!'))\r\n            localStorage.setItem('isDone', isDone.join(', '))\r\n            localStorage.setItem('icon', icon.join(', '))\r\n            document.querySelector('.task').value = '';\r\n        }\r\n\r\n\r\n\r\n        this.setState({localTasks: localStorage.getItem('tasks'), localIsDone: localStorage.getItem('isDone'), localIcon: localStorage.getItem('icon')})\r\n    }   \r\n    \r\n    clear(e) {\r\n        e.preventDefault();\r\n        \r\n        let ask = window.confirm('You are trying to delete all tasks!\\r\\nAre You sure?')\r\n\r\n        if(ask) {\r\n            localStorage.removeItem('isDone');\r\n            localStorage.removeItem('tasks');\r\n            this.setState({localTasks: localStorage.getItem('tasks')});\r\n        }\r\n\r\n    }\r\n\r\n    isDone = (e) => {\r\n        let zzz = document.querySelectorAll('.check-square'),\r\n            getLocalIsDone = this.state.localIsDone.split(', '),\r\n            getLocalIcon = this.state.localIcon.split(', '),\r\n            target = e.target\r\n\r\n        \r\n\r\n        for(let i=0; i < zzz.length; i++) {\r\n            if(target === zzz[i]) {\r\n                getLocalIsDone[i] = 'done';\r\n                getLocalIcon[i] = 'far fa-check-square check-square'\r\n                break\r\n            }\r\n        }\r\n\r\n        localStorage.setItem('isDone', getLocalIsDone.join(', '));\r\n        localStorage.setItem('icon', getLocalIcon.join(', '));\r\n        this.setState({localIsDone: localStorage.getItem('isDone'), localIcon: localStorage.getItem('icon')});\r\n    }\r\n\r\n    render() {\r\n        \r\n        let x = [],\r\n            y = [],\r\n            z = [];\r\n        if (this.state.localTasks !== null) {\r\n            x = this.state.localTasks.split('!next!');\r\n            y = this.state.localIsDone.split(', ');\r\n            z = this.state.localIcon.split(', ');\r\n        }\r\n        const listTask = x.map((d, i) => <p className={y[i]} key={i}>\r\n            {d}\r\n            <i className=\"fas fa-thumbtack marker\"></i>\r\n            <i onClick={this.isDone} className={z[i]}></i>\r\n        </p>);\r\n\r\n        return (\r\n            <div id='main'>\r\n                <form>\r\n                    <input className='task' placeholder='Enter a new task...'></input>\r\n                    <button onClick={this.click} className='confirm_task'><i className=\"fa fa-plus\"></i></button>\r\n                </form>\r\n                <div className='task-list_wrapper'>\r\n                    <div id='task-list'>{listTask}</div>\r\n                </div>    \r\n                <button className='cleaner' onClick={this.clear}>Clean All</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Body","import React from 'react';\r\nimport './Header.css';\r\n\r\n\r\n\r\nclass Header extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {date: new Date()}\r\n\t\t\r\n\t}\r\n\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.timerId = setInterval(() => {\r\n\t\t\tthis.tick()\r\n\t\t}, 1000)\r\n\t}\r\n\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.timerId)\r\n\t}\r\n\r\n\r\n\ttick() {\r\n\t\tthis.setState({\r\n\t\t\tdate: new Date()\r\n\t\t})\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<header>\r\n\t\t\t  \t<div className=\"header_wrapper\">\r\n\t\t\t  \t  \t<h1 className='title'>2doList by SoloWAY</h1>\r\n\t\t\t  \t  \t<div className=\"date\">\r\n\t\t\t\t\t\t<p>{this.state.date.toLocaleTimeString()}</p>\r\n\t\t\t  \t  \t  \t<p>{this.state.date.toLocaleDateString()}</p>\r\n\t\t\t  \t  \t</div>\r\n\t\t\t  \t</div>\r\n\t\t\t</header>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Weather.css';\r\nimport therm from './thermometer.svg';\r\n\r\nconst apiKey = '05ab4ed9b8e0e1dede5632a9237d1bee';\r\n\r\nclass Weather extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {weather: '', temp: '', city: 'Dnipro'};\r\n        this.weatherUpdate();\r\n    }\r\n\r\n    \r\n\r\n    weatherUpdate = async () => {\r\n        const apiRequest = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.city},UA&appid=${apiKey}&units=metric`)\r\n        const weatherData = await apiRequest.json();\r\n        this.setState({temp: weatherData.main.temp.toFixed(0)})\r\n        this.setState({weather: weatherData.weather[0].icon})\r\n    }\r\n\r\n\r\n    changeCity = async () => {\r\n        let select = document.querySelector('select'),\r\n            selectValue = select.value;\r\n            const apiRequest = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${selectValue},UA&appid=${apiKey}&units=metric`)\r\n            const weatherData = await apiRequest.json();\r\n            this.setState({temp: weatherData.main.temp.toFixed(0)})\r\n            this.setState({weather: weatherData.weather[0].icon})\r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n        let url = `images/${this.state.weather}.svg`\r\n\r\n\r\n        return (\r\n            <div className='weather_widget'>\r\n                <img src={url} alt='weatherIcon' className='weatherIcon'></img>\r\n                <div className='temperature'>\r\n                    <h2>{this.state.temp}<img src={therm} alt='therm' className='therm'></img></h2>\r\n                    <select onChange={this.changeCity}>\r\n                        <option>Dnipro</option>\r\n                        <option>Kiev</option>\r\n                        <option>Lviv</option>\r\n                        <option>Kharkiv</option>\r\n                        <option>Odessa</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Weather","import React from 'react';\r\nimport './Footer.css'\r\n\r\n\r\n\r\nclass Footer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <footer>\r\n                <a href='https://www.instagram.com/reus_solovey/'><i className=\"fab fa-instagram social\"></i></a>\r\n                <a href='https://github.com/RSoloWay'><i className=\"fab fa-github social\"></i></a>\r\n                <a href='https://www.linkedin.com/in/rost-solovey/'><i className=\"fab fa-linkedin-in social\"></i></a>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Body from './Body/Body';\nimport Header from './Header/Header';\nimport Weather from './Weather/Weather';\nimport Footer from './Footer/Footer';\n\n\nfunction test() {\n\tlet z = window.innerWidth;\n\tconsole.log(z)\n\tif (z <= 576) {\n\t\tlet x = document.querySelector('.appWrapper');\n\t\tconsole.log(x);\n\t\tlet a = window.innerHeight;\n\t\tconsole.log(a)\n\t\tx.style.height = a + 'px';\n\t}\n\n\t\n}\n\n\nfunction App() {\n  \treturn (\n\t\t<div onLoad={test} className='appWrapper'>\n\t\t\t<Header/>\n\t\t\t<Body/>\n\t\t\t<Weather/>\n\t\t\t<Footer/>\n\t\t</div>\n  \t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css'\nimport App from './App';\n// import Header from './Header'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// function clock() {\n    \n// }\n\n// setInterval(clock, 1000);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}